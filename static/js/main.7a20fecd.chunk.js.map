{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","wasEditing","value","ref","useRef","useEffect","current","usePrevious","editFieldRef","editButtonRef","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Form","setName","addTask","required","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","taskList","map","filterList","tasksNoun","length","headingText","updateTasks","remainigTasks","console","log","editedTaskList","prevTaskLength","listHeadingRef","newTask","nanoid","tabIndex","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a20fecd.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction usePrevious(value){\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n\r\n    return ref.current;\r\n}\r\n\r\nexport default function Todo(props){\r\n\r\n    const [isEditing, setEditing] = useState(false);\r\n\r\n    const [newName, setNewName] = useState('');\r\n\r\n    const wasEditing = usePrevious(isEditing);\r\n\r\n    const editFieldRef = useRef(null);\r\n    const editButtonRef= useRef(null);\r\n\r\n    function handleCange(e){\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        debugger;\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName('');\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n            New name for {props.name}\r\n        </label>\r\n        <input\r\n            id={props.id}\r\n            className=\"todo-text\"\r\n            type=\"text\"\r\n            value={newName}\r\n            onChange={handleCange}\r\n            ref={editFieldRef}\r\n        />\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\r\n            Cancel\r\n            <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n            Save\r\n            <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n        </div>\r\n    </form>\r\n    );\r\n    const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n        <div className=\"c-cb\">\r\n            <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n            />\r\n            <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n            </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n            <button\r\n            type=\"button\"\r\n            className=\"btn\" \r\n            onClick={()=> setEditing(true)}\r\n            ref={editButtonRef}\r\n            >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n            </button>\r\n            <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n            >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n        editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n        editButtonRef.current.focus();\r\n    }\r\n    }, [wasEditing, isEditing]);\r\n\r\n    return <li className=\"todo stack-small\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n\r\n}","import React, { useState } from 'react';\r\n\r\nfunction Form(props){\r\n\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function handleChange(e){\r\n        setName(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        props.addTask(name);\r\n        setName(\"\");\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n          <h2 className=\"label-wrapper\">\r\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n              What needs to be done?\r\n            </label>\r\n          </h2>\r\n          <input\r\n          required\r\n            type=\"text\"\r\n            id=\"new-todo-input\"\r\n            className=\"input input__lg\"\r\n            name=\"text\"\r\n            autoComplete=\"off\"\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n            Add\r\n          </button>\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction FilterButton(props){\r\n    return(\r\n        <button type=\"button\" className=\"btn toggle-btn\" aria-pressed={props.isPressed} onClick={() => props.setFilter(props.name)}>\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n          </button>\r\n    );\r\n}\r\n\r\nexport default FilterButton;","import React, {useState, useRef, useEffect} from 'react';\nimport {nanoid} from 'nanoid';\n\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\n\nfunction usePrevious(value) {\n    const ref = useRef();\n\n    useEffect(() => {\n        ref.current = value;\n    });\n\n    return ref.current;\n}\n\nconst FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    completed: task => task.completed\n}\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP)\n\nfunction App(props) {\n\n    const [tasks, setTasks] = useState(props.tasks);\n\n    const [filter, setFilter] = useState('All');\n\n    const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n\n  const filterList = FILTER_NAMES.map(name => (\n      <FilterButton\n        key={name}\n        name={name}\n        isPressed={name === filter}\n        setFilter={setFilter}\n      />\n  ))\n\n    function addTask(name){\n        const newTask = {id: \"todo-\" + nanoid(), name: name, completed: false};\n        setTasks([...tasks, newTask]);\n    }\n\n    const tasksNoun = taskList.length !==1 ? 'tasks' : 'task';\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n    function toggleTaskCompleted(id) {\n        const updateTasks = tasks.map(task => {\n            if(id === task.id) {\n                return {...task, completed: !task.completed}\n            }\n            return task;\n        });\n        setTasks(updateTasks);\n    }\n\n    function deleteTask(id){\n        const remainigTasks = tasks.filter(task => id !== task.id);\n        setTasks(remainigTasks);\n        console.log(remainigTasks);\n    }\n\n    function editTask(id, newName){\n        const editedTaskList = tasks.map(task => {\n            if(id === task.id){\n                return {...task, name:newName}\n            }\n            return task;\n        })\n        setTasks(editedTaskList);\n    }\n\n    const prevTaskLength = usePrevious(tasks.length);\n\n    useEffect(() => {\n        if(tasks.length - prevTaskLength === -1){\n            listHeadingRef.current.focus();\n        }\n    }, [tasks.length, prevTaskLength]);\n\n    const listHeadingRef = useRef(null);\n\n    return (\n      <div className=\"todoapp stack-large\">\n        <h1>Todo Project</h1>\n        <Form addTask={addTask} />\n        <div className=\"filters btn-group stack-exception\">\n            {filterList}\n        </div>\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {headingText}\n        </h2>\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n          {taskList}\n          \n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n    { id:\"todo-0\", name:\"Eat\", completed:\"true\" },\n    { id:\"todo-1\", name:\"Sleep\", completed:\"true\" },\n    { id:\"todo-2\", name:\"Work\", completed:\"true\" }\n]\n\nReactDOM.render( <App tasks={DATA} />,document.getElementById('root') );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}